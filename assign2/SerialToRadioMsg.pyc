#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'SerialToRadio'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 14

# The Active Message type associated with this message.
AM_TYPE = 101

class SerialToRadio(tinyos.message.Message.Message):
    # Create a new SerialToRadio of size 14.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=14):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <SerialToRadio> \n"
        try:
            s += "  [type=0x%x]\n" % (self.get_type())
        except:
            pass
        try:
            s += "  [light_a=0x%x]\n" % (self.get_light_a())
        except:
            pass
        try:
            s += "  [humidity_a=0x%x]\n" % (self.get_humidity_a())
        except:
            pass
        try:
            s += "  [temp_a=0x%x]\n" % (self.get_temp_a())
        except:
            pass
        try:
            s += "  [light_b=0x%x]\n" % (self.get_light_b())
        except:
            pass
        try:
            s += "  [humidity_b=0x%x]\n" % (self.get_humidity_b())
        except:
            pass
        try:
            s += "  [temp_b=0x%x]\n" % (self.get_temp_b())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: type
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'type' is signed (False).
    #
    def isSigned_type(self):
        return False
    
    #
    # Return whether the field 'type' is an array (False).
    #
    def isArray_type(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'type'
    #
    def offset_type(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'type'
    #
    def offsetBits_type(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'type'
    #
    def get_type(self):
        return self.getUIntElement(self.offsetBits_type(), 16, 1)
    
    #
    # Set the value of the field 'type'
    #
    def set_type(self, value):
        self.setUIntElement(self.offsetBits_type(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'type'
    #
    def size_type(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'type'
    #
    def sizeBits_type(self):
        return 16
    
    #
    # Accessor methods for field: light_a
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'light_a' is signed (False).
    #
    def isSigned_light_a(self):
        return False
    
    #
    # Return whether the field 'light_a' is an array (False).
    #
    def isArray_light_a(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'light_a'
    #
    def offset_light_a(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'light_a'
    #
    def offsetBits_light_a(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'light_a'
    #
    def get_light_a(self):
        return self.getUIntElement(self.offsetBits_light_a(), 16, 1)
    
    #
    # Set the value of the field 'light_a'
    #
    def set_light_a(self, value):
        self.setUIntElement(self.offsetBits_light_a(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'light_a'
    #
    def size_light_a(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'light_a'
    #
    def sizeBits_light_a(self):
        return 16
    
    #
    # Accessor methods for field: humidity_a
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'humidity_a' is signed (False).
    #
    def isSigned_humidity_a(self):
        return False
    
    #
    # Return whether the field 'humidity_a' is an array (False).
    #
    def isArray_humidity_a(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'humidity_a'
    #
    def offset_humidity_a(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'humidity_a'
    #
    def offsetBits_humidity_a(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'humidity_a'
    #
    def get_humidity_a(self):
        return self.getUIntElement(self.offsetBits_humidity_a(), 16, 1)
    
    #
    # Set the value of the field 'humidity_a'
    #
    def set_humidity_a(self, value):
        self.setUIntElement(self.offsetBits_humidity_a(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'humidity_a'
    #
    def size_humidity_a(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'humidity_a'
    #
    def sizeBits_humidity_a(self):
        return 16
    
    #
    # Accessor methods for field: temp_a
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temp_a' is signed (False).
    #
    def isSigned_temp_a(self):
        return False
    
    #
    # Return whether the field 'temp_a' is an array (False).
    #
    def isArray_temp_a(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temp_a'
    #
    def offset_temp_a(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'temp_a'
    #
    def offsetBits_temp_a(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'temp_a'
    #
    def get_temp_a(self):
        return self.getUIntElement(self.offsetBits_temp_a(), 16, 1)
    
    #
    # Set the value of the field 'temp_a'
    #
    def set_temp_a(self, value):
        self.setUIntElement(self.offsetBits_temp_a(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temp_a'
    #
    def size_temp_a(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temp_a'
    #
    def sizeBits_temp_a(self):
        return 16
    
    #
    # Accessor methods for field: light_b
    #   Field type: int
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'light_b' is signed (False).
    #
    def isSigned_light_b(self):
        return False
    
    #
    # Return whether the field 'light_b' is an array (False).
    #
    def isArray_light_b(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'light_b'
    #
    def offset_light_b(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'light_b'
    #
    def offsetBits_light_b(self):
        return 64
    
    #
    # Return the value (as a int) of the field 'light_b'
    #
    def get_light_b(self):
        return self.getUIntElement(self.offsetBits_light_b(), 16, 1)
    
    #
    # Set the value of the field 'light_b'
    #
    def set_light_b(self, value):
        self.setUIntElement(self.offsetBits_light_b(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'light_b'
    #
    def size_light_b(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'light_b'
    #
    def sizeBits_light_b(self):
        return 16
    
    #
    # Accessor methods for field: humidity_b
    #   Field type: int
    #   Offset (bits): 80
    #   Size (bits): 16
    #

    #
    # Return whether the field 'humidity_b' is signed (False).
    #
    def isSigned_humidity_b(self):
        return False
    
    #
    # Return whether the field 'humidity_b' is an array (False).
    #
    def isArray_humidity_b(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'humidity_b'
    #
    def offset_humidity_b(self):
        return (80 / 8)
    
    #
    # Return the offset (in bits) of the field 'humidity_b'
    #
    def offsetBits_humidity_b(self):
        return 80
    
    #
    # Return the value (as a int) of the field 'humidity_b'
    #
    def get_humidity_b(self):
        return self.getUIntElement(self.offsetBits_humidity_b(), 16, 1)
    
    #
    # Set the value of the field 'humidity_b'
    #
    def set_humidity_b(self, value):
        self.setUIntElement(self.offsetBits_humidity_b(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'humidity_b'
    #
    def size_humidity_b(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'humidity_b'
    #
    def sizeBits_humidity_b(self):
        return 16
    
    #
    # Accessor methods for field: temp_b
    #   Field type: int
    #   Offset (bits): 96
    #   Size (bits): 16
    #

    #
    # Return whether the field 'temp_b' is signed (False).
    #
    def isSigned_temp_b(self):
        return False
    
    #
    # Return whether the field 'temp_b' is an array (False).
    #
    def isArray_temp_b(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'temp_b'
    #
    def offset_temp_b(self):
        return (96 / 8)
    
    #
    # Return the offset (in bits) of the field 'temp_b'
    #
    def offsetBits_temp_b(self):
        return 96
    
    #
    # Return the value (as a int) of the field 'temp_b'
    #
    def get_temp_b(self):
        return self.getUIntElement(self.offsetBits_temp_b(), 16, 1)
    
    #
    # Set the value of the field 'temp_b'
    #
    def set_temp_b(self, value):
        self.setUIntElement(self.offsetBits_temp_b(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'temp_b'
    #
    def size_temp_b(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'temp_b'
    #
    def sizeBits_temp_b(self):
        return 16
    
