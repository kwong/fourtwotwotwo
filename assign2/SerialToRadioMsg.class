/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialToRadioMsg'
 * message type.
 */

public class SerialToRadioMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 101;

    /** Create a new SerialToRadioMsg of size 14. */
    public SerialToRadioMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialToRadioMsg of the given data_length. */
    public SerialToRadioMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg with the given data_length
     * and base offset.
     */
    public SerialToRadioMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg using the given byte array
     * as backing store.
     */
    public SerialToRadioMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialToRadioMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialToRadioMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg embedded in the given message
     * at the given base offset.
     */
    public SerialToRadioMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialToRadioMsg embedded in the given message
     * at the given base offset and length.
     */
    public SerialToRadioMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialToRadioMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [light_a=0x"+Long.toHexString(get_light_a())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity_a=0x"+Long.toHexString(get_humidity_a())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temp_a=0x"+Long.toHexString(get_temp_a())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [light_b=0x"+Long.toHexString(get_light_b())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidity_b=0x"+Long.toHexString(get_humidity_b())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temp_b=0x"+Long.toHexString(get_temp_b())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'type'
     */
    public int get_type() {
        return (int)getUIntBEElement(offsetBits_type(), 16);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(int value) {
        setUIntBEElement(offsetBits_type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: light_a
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'light_a' is signed (false).
     */
    public static boolean isSigned_light_a() {
        return false;
    }

    /**
     * Return whether the field 'light_a' is an array (false).
     */
    public static boolean isArray_light_a() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'light_a'
     */
    public static int offset_light_a() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'light_a'
     */
    public static int offsetBits_light_a() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'light_a'
     */
    public int get_light_a() {
        return (int)getUIntBEElement(offsetBits_light_a(), 16);
    }

    /**
     * Set the value of the field 'light_a'
     */
    public void set_light_a(int value) {
        setUIntBEElement(offsetBits_light_a(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'light_a'
     */
    public static int size_light_a() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'light_a'
     */
    public static int sizeBits_light_a() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity_a
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity_a' is signed (false).
     */
    public static boolean isSigned_humidity_a() {
        return false;
    }

    /**
     * Return whether the field 'humidity_a' is an array (false).
     */
    public static boolean isArray_humidity_a() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity_a'
     */
    public static int offset_humidity_a() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity_a'
     */
    public static int offsetBits_humidity_a() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'humidity_a'
     */
    public int get_humidity_a() {
        return (int)getUIntBEElement(offsetBits_humidity_a(), 16);
    }

    /**
     * Set the value of the field 'humidity_a'
     */
    public void set_humidity_a(int value) {
        setUIntBEElement(offsetBits_humidity_a(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity_a'
     */
    public static int size_humidity_a() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity_a'
     */
    public static int sizeBits_humidity_a() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temp_a
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temp_a' is signed (false).
     */
    public static boolean isSigned_temp_a() {
        return false;
    }

    /**
     * Return whether the field 'temp_a' is an array (false).
     */
    public static boolean isArray_temp_a() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temp_a'
     */
    public static int offset_temp_a() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temp_a'
     */
    public static int offsetBits_temp_a() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'temp_a'
     */
    public int get_temp_a() {
        return (int)getUIntBEElement(offsetBits_temp_a(), 16);
    }

    /**
     * Set the value of the field 'temp_a'
     */
    public void set_temp_a(int value) {
        setUIntBEElement(offsetBits_temp_a(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temp_a'
     */
    public static int size_temp_a() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temp_a'
     */
    public static int sizeBits_temp_a() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: light_b
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'light_b' is signed (false).
     */
    public static boolean isSigned_light_b() {
        return false;
    }

    /**
     * Return whether the field 'light_b' is an array (false).
     */
    public static boolean isArray_light_b() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'light_b'
     */
    public static int offset_light_b() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'light_b'
     */
    public static int offsetBits_light_b() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'light_b'
     */
    public int get_light_b() {
        return (int)getUIntBEElement(offsetBits_light_b(), 16);
    }

    /**
     * Set the value of the field 'light_b'
     */
    public void set_light_b(int value) {
        setUIntBEElement(offsetBits_light_b(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'light_b'
     */
    public static int size_light_b() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'light_b'
     */
    public static int sizeBits_light_b() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidity_b
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidity_b' is signed (false).
     */
    public static boolean isSigned_humidity_b() {
        return false;
    }

    /**
     * Return whether the field 'humidity_b' is an array (false).
     */
    public static boolean isArray_humidity_b() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'humidity_b'
     */
    public static int offset_humidity_b() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidity_b'
     */
    public static int offsetBits_humidity_b() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'humidity_b'
     */
    public int get_humidity_b() {
        return (int)getUIntBEElement(offsetBits_humidity_b(), 16);
    }

    /**
     * Set the value of the field 'humidity_b'
     */
    public void set_humidity_b(int value) {
        setUIntBEElement(offsetBits_humidity_b(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'humidity_b'
     */
    public static int size_humidity_b() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'humidity_b'
     */
    public static int sizeBits_humidity_b() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temp_b
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temp_b' is signed (false).
     */
    public static boolean isSigned_temp_b() {
        return false;
    }

    /**
     * Return whether the field 'temp_b' is an array (false).
     */
    public static boolean isArray_temp_b() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temp_b'
     */
    public static int offset_temp_b() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temp_b'
     */
    public static int offsetBits_temp_b() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'temp_b'
     */
    public int get_temp_b() {
        return (int)getUIntBEElement(offsetBits_temp_b(), 16);
    }

    /**
     * Set the value of the field 'temp_b'
     */
    public void set_temp_b(int value) {
        setUIntBEElement(offsetBits_temp_b(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temp_b'
     */
    public static int size_temp_b() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temp_b'
     */
    public static int sizeBits_temp_b() {
        return 16;
    }

}
