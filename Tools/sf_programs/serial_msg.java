/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'serial_msg'
 * message type.
 */

package blah.foo;

public class serial_msg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 101;

    /** Create a new serial_msg of size 20. */
    public serial_msg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new serial_msg of the given data_length. */
    public serial_msg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg with the given data_length
     * and base offset.
     */
    public serial_msg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg using the given byte array
     * as backing store.
     */
    public serial_msg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg using the given byte array
     * as backing store, with the given base offset.
     */
    public serial_msg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public serial_msg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg embedded in the given message
     * at the given base offset.
     */
    public serial_msg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new serial_msg embedded in the given message
     * at the given base offset and length.
     */
    public serial_msg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <serial_msg> \n";
      try {
        s += "  [param_one=0x"+Long.toHexString(get_param_one())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_two=0x"+Long.toHexString(get_param_two())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_three=0x"+Long.toHexString(get_param_three())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_four=0x"+Long.toHexString(get_param_four())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_five=0x"+Long.toHexString(get_param_five())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_six=0x"+Long.toHexString(get_param_six())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_seven=0x"+Long.toHexString(get_param_seven())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_eight=0x"+Long.toHexString(get_param_eight())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_nine=0x"+Long.toHexString(get_param_nine())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [param_ten=0x"+Long.toHexString(get_param_ten())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_one
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_one' is signed (false).
     */
    public static boolean isSigned_param_one() {
        return false;
    }

    /**
     * Return whether the field 'param_one' is an array (false).
     */
    public static boolean isArray_param_one() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_one'
     */
    public static int offset_param_one() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_one'
     */
    public static int offsetBits_param_one() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'param_one'
     */
    public int get_param_one() {
        return (int)getUIntBEElement(offsetBits_param_one(), 16);
    }

    /**
     * Set the value of the field 'param_one'
     */
    public void set_param_one(int value) {
        setUIntBEElement(offsetBits_param_one(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_one'
     */
    public static int size_param_one() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_one'
     */
    public static int sizeBits_param_one() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_two
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_two' is signed (false).
     */
    public static boolean isSigned_param_two() {
        return false;
    }

    /**
     * Return whether the field 'param_two' is an array (false).
     */
    public static boolean isArray_param_two() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_two'
     */
    public static int offset_param_two() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_two'
     */
    public static int offsetBits_param_two() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'param_two'
     */
    public int get_param_two() {
        return (int)getUIntBEElement(offsetBits_param_two(), 16);
    }

    /**
     * Set the value of the field 'param_two'
     */
    public void set_param_two(int value) {
        setUIntBEElement(offsetBits_param_two(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_two'
     */
    public static int size_param_two() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_two'
     */
    public static int sizeBits_param_two() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_three
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_three' is signed (false).
     */
    public static boolean isSigned_param_three() {
        return false;
    }

    /**
     * Return whether the field 'param_three' is an array (false).
     */
    public static boolean isArray_param_three() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_three'
     */
    public static int offset_param_three() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_three'
     */
    public static int offsetBits_param_three() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'param_three'
     */
    public int get_param_three() {
        return (int)getUIntBEElement(offsetBits_param_three(), 16);
    }

    /**
     * Set the value of the field 'param_three'
     */
    public void set_param_three(int value) {
        setUIntBEElement(offsetBits_param_three(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_three'
     */
    public static int size_param_three() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_three'
     */
    public static int sizeBits_param_three() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_four
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_four' is signed (false).
     */
    public static boolean isSigned_param_four() {
        return false;
    }

    /**
     * Return whether the field 'param_four' is an array (false).
     */
    public static boolean isArray_param_four() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_four'
     */
    public static int offset_param_four() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_four'
     */
    public static int offsetBits_param_four() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'param_four'
     */
    public int get_param_four() {
        return (int)getUIntBEElement(offsetBits_param_four(), 16);
    }

    /**
     * Set the value of the field 'param_four'
     */
    public void set_param_four(int value) {
        setUIntBEElement(offsetBits_param_four(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_four'
     */
    public static int size_param_four() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_four'
     */
    public static int sizeBits_param_four() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_five
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_five' is signed (false).
     */
    public static boolean isSigned_param_five() {
        return false;
    }

    /**
     * Return whether the field 'param_five' is an array (false).
     */
    public static boolean isArray_param_five() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_five'
     */
    public static int offset_param_five() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_five'
     */
    public static int offsetBits_param_five() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'param_five'
     */
    public int get_param_five() {
        return (int)getUIntBEElement(offsetBits_param_five(), 16);
    }

    /**
     * Set the value of the field 'param_five'
     */
    public void set_param_five(int value) {
        setUIntBEElement(offsetBits_param_five(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_five'
     */
    public static int size_param_five() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_five'
     */
    public static int sizeBits_param_five() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_six
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_six' is signed (false).
     */
    public static boolean isSigned_param_six() {
        return false;
    }

    /**
     * Return whether the field 'param_six' is an array (false).
     */
    public static boolean isArray_param_six() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_six'
     */
    public static int offset_param_six() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_six'
     */
    public static int offsetBits_param_six() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'param_six'
     */
    public int get_param_six() {
        return (int)getUIntBEElement(offsetBits_param_six(), 16);
    }

    /**
     * Set the value of the field 'param_six'
     */
    public void set_param_six(int value) {
        setUIntBEElement(offsetBits_param_six(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_six'
     */
    public static int size_param_six() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_six'
     */
    public static int sizeBits_param_six() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_seven
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_seven' is signed (false).
     */
    public static boolean isSigned_param_seven() {
        return false;
    }

    /**
     * Return whether the field 'param_seven' is an array (false).
     */
    public static boolean isArray_param_seven() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_seven'
     */
    public static int offset_param_seven() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_seven'
     */
    public static int offsetBits_param_seven() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'param_seven'
     */
    public int get_param_seven() {
        return (int)getUIntBEElement(offsetBits_param_seven(), 16);
    }

    /**
     * Set the value of the field 'param_seven'
     */
    public void set_param_seven(int value) {
        setUIntBEElement(offsetBits_param_seven(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_seven'
     */
    public static int size_param_seven() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_seven'
     */
    public static int sizeBits_param_seven() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_eight
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_eight' is signed (false).
     */
    public static boolean isSigned_param_eight() {
        return false;
    }

    /**
     * Return whether the field 'param_eight' is an array (false).
     */
    public static boolean isArray_param_eight() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_eight'
     */
    public static int offset_param_eight() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_eight'
     */
    public static int offsetBits_param_eight() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'param_eight'
     */
    public int get_param_eight() {
        return (int)getUIntBEElement(offsetBits_param_eight(), 16);
    }

    /**
     * Set the value of the field 'param_eight'
     */
    public void set_param_eight(int value) {
        setUIntBEElement(offsetBits_param_eight(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_eight'
     */
    public static int size_param_eight() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_eight'
     */
    public static int sizeBits_param_eight() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_nine
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_nine' is signed (false).
     */
    public static boolean isSigned_param_nine() {
        return false;
    }

    /**
     * Return whether the field 'param_nine' is an array (false).
     */
    public static boolean isArray_param_nine() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_nine'
     */
    public static int offset_param_nine() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_nine'
     */
    public static int offsetBits_param_nine() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'param_nine'
     */
    public int get_param_nine() {
        return (int)getUIntBEElement(offsetBits_param_nine(), 16);
    }

    /**
     * Set the value of the field 'param_nine'
     */
    public void set_param_nine(int value) {
        setUIntBEElement(offsetBits_param_nine(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_nine'
     */
    public static int size_param_nine() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_nine'
     */
    public static int sizeBits_param_nine() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: param_ten
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'param_ten' is signed (false).
     */
    public static boolean isSigned_param_ten() {
        return false;
    }

    /**
     * Return whether the field 'param_ten' is an array (false).
     */
    public static boolean isArray_param_ten() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'param_ten'
     */
    public static int offset_param_ten() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'param_ten'
     */
    public static int offsetBits_param_ten() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'param_ten'
     */
    public int get_param_ten() {
        return (int)getUIntBEElement(offsetBits_param_ten(), 16);
    }

    /**
     * Set the value of the field 'param_ten'
     */
    public void set_param_ten(int value) {
        setUIntBEElement(offsetBits_param_ten(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'param_ten'
     */
    public static int size_param_ten() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'param_ten'
     */
    public static int sizeBits_param_ten() {
        return 16;
    }

}
